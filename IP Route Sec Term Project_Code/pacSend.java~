/******************************************************************************
*pacSend.java: Written as a part of RouteSec Term project for CSC/ECE573
*Authors: Aditya Vyas, Bhavin Shah, Manshi Choudhry, Spoorthi Gururaj 
*Date: 20 Nov 2012
*Written and compiled on Ubuntu 12.04, Eclipse IDE 
*******************************************************************************
*This program uses jNetPCap library available under open-source LGPL license
*http://jnetpcap.com/
*******************************************************************************
*The program form the portion of the project where we reply the communication
*between the original client and server from a stored capture file.
*Works with counterpart program pacDump.java
*Running instructions : The program has to be run with root privilege 
*otherwire jNetPcap is not able to find a list of devices. 
******************************************************************************/


import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
    
import org.jnetpcap.Pcap;
import org.jnetpcap.PcapIf;
import org.jnetpcap.packet.JMemoryPacket;
import org.jnetpcap.packet.PcapPacket;
import org.jnetpcap.packet.PcapPacketHandler;
import org.jnetpcap.packet.format.FormatUtils;
import org.jnetpcap.protocol.lan.Ethernet;
import org.jnetpcap.protocol.network.Ip4;
import org.jnetpcap.protocol.tcpip.Tcp;
    
/******************************************************************************
*Class: pacSend
*The starter class for pacSend.java
*Please replace the file name by the capture file generated by the counterpart 
*program capDump.java
******************************************************************************/

public class pacSend {    

/******************************************************************************
*Method: main
*Driver for the sending of packets from the capture file.
*We start with polling for the available devices to send the capture out.
******************************************************************************/
       
        public static void main(String args[]) {

//Building string for error messages
            final StringBuilder errbuf = new StringBuilder();

//Getting a list of available nics    
            List<PcapIf> alldevs = new ArrayList<PcapIf>(); 

   
            int r = Pcap.findAllDevs(alldevs, errbuf); 

//Ensure that the program is executed as root. Otherwise no interfaces would be found.

            if (r == Pcap.NOT_OK || alldevs.isEmpty()) {
                System.out.printf("Cannot read the list of devices. Did you run the program as root?: %s", errbuf.toString());
                return;
            }
            

            System.out.println("Followinf network devices were found:");
            int i = 0;
            for (PcapIf device : alldevs) {
                String description = (device.getDescription() != null) ? device.getDescription() : "No description available";
                System.out.printf("#%d: %s [%s]\n", i++, device.getName(), description);
            }

//Select the appropriate interface to send packets out of here
        
             System.out.println("Enter the interface number to send packets");
             PcapIf device = null;
      try
      {
             InputStreamReader daa = new InputStreamReader(System.in);
             BufferedReader inaa = new BufferedReader(daa);
             String l= inaa.readLine().trim();
             Integer j = Integer.valueOf(l);
             device = alldevs.get(j);
      }
      catch(Exception e)
      {
          e.printStackTrace();
      }
                   
            int snaplen = 64 * 1024;           
            int flags = Pcap.MODE_PROMISCUOUS; 
            int timeout = 60 * 1000;           
            final Pcap pcap =
                Pcap.openLive(device.getName(), snaplen, flags, timeout, errbuf);
    
            if (pcap == null) {
                System.err.printf("Error while opening device for capture: "
                    + errbuf.toString());
                return;
            }

/******************************************************************************
*Please replace the capture file path here. In this version, capncsu.cap 
*represents the capture file generated by capDump.java
******************************************************************************/
           
            final String file = "/home/manshi/Desktop/IP/capncsu.cap";
            System.out.printf("Opening file for reading: %s%n", file);
           
            Pcap pcap1 = Pcap.openOffline(file, errbuf);
    
            if (pcap1 == null) {
                System.err.printf("Error while opening device for capture: "
                    + errbuf.toString());
                return;
            }
    
/******************************************************************************
* Packet handler to be called every time a packet is received. 
******************************************************************************/

            PcapPacketHandler<String> jpacketHandler = new PcapPacketHandler<String>() {
    
                public void nextPacket(PcapPacket packet, String user) {
    
                    System.out.printf("Received at %s caplen=%-4d len=%-4d %s\n", 
                        new Date(packet.getCaptureHeader().timestampInMillis()), 
                        packet.getCaptureHeader().caplen(), 
                        packet.getCaptureHeader().wirelen(), 
                        user 
                        );
     
                    Tcp ipcheck = new Tcp();
                   
                    Ip4 ip = packet.getHeader(new Ip4());
                                     
                    if (pcap.sendPacket(packet) != Pcap.OK) {
                        System.err.println(pcap.getErr());
                      }
                      else{
                          System.out.println("Sent");
                          }
                }
            };

//Insert the number of packets to be sent from the capture file. 200 here spscifies that number
    
            try
            {
                pcap1.loop(200, jpacketHandler, "Packet sent\n");
            }
            finally
            {
            
                pcap.close();
                pcap1.close();
            }
    }
  }

